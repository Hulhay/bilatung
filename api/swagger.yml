swagger: "2.0"
info:
  description: "Bilatung API"
  version: "1.0.0"
  title: "Bilatung"
  contact:
    email: "prasetyosyifa@gmail.com"
host: localhost:8080
schemes:
  - "http"
tags:
  - name: "Health"
    description : "Check the service"
  - name: "Quote"
    description: "Every request and response about Quote"
  - name: "Auth"
    description: "Every request and response about Auth"

paths:
  /health:
    get:
      summary: "Health check"
      description: "Health check endpoint"
      tags:
        - "Health"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Success"
          schema:
            type: object
            properties:
              message:
                type: "string"
                description: "Success retrieve data"
                example: "App running well"
              data:
                $ref: "#/definitions/Health"
        default:
          $ref: "#/responses/ErrorUnexpected"

  /register:
    post:
      summary: "Create new account"
      description: "Register new account for this app"
      tags:
        - "Auth"
      produces:
        - "application/json"
      parameters:
        - in: body
          name: body
          description: "Body for create new account request"
          required: true
          schema:
            $ref: "#/definitions/RegisterRequest"
      responses:
        "201":
          description: "Success"
          schema:
            type: object
            properties:
              message:
                type: "string"
                description: "Success create new account"
                example: "Succeess"
        default:
          $ref: "#/responses/ErrorUnexpected"
          
  /login:
    post:
      summary: "Login to app"
      description: "Login with an existing account"
      tags:
        - "Auth"
      produces:
        - "application/json"
      parameters:
        - in: body
          name: body
          description: "Body for login with an existing account"
          required: true
          schema:
            $ref: "#/definitions/LoginRequest"
      responses:
        "200":
          description: "Success"
          schema:
            type: object
            properties:
              message:
                type: "string"
                description: "Login successfully"
                example: "Login successfully"
              data:
                $ref: "#/definitions/Auth"
        default:
          $ref: "#/responses/ErrorUnexpected"
  
  /logout:
    post:
      summary: "Logout from app"
      description: "Logout from app"
      tags:
        - "Auth"
      produces:
        - "application/json"
      parameters:
        - in: header
          name: "token"
          type: "string"
          description: "token for every account"
          required: true
      responses:
        "200":
          description: "Success"
          schema:
            type: object
            properties:
              message:
                type: "string"
                description: "Logout successfully"
                example: "Logout successfully"
        default:
          $ref: "#/responses/ErrorUnexpected"

  /quote:
    post:
      summary: "Create quote"
      description: "Cretae new quote"
      tags:
        - "Quote"
      produces:
        - "application/json"
      parameters:
        - in: header
          name: "token"
          type: "string"
          description: "token for every account"
          required: true
        - in: body
          name: "body"
          description: "Body for create new quote"
          required: true
          schema:
            $ref: "#/definitions/Quotes"
      responses:
        "201":
          description: "Success"
          schema:
            type: object
            properties:
              message:
                type: "string"
                description: "Success create new quote"
                example: "Succeess"
        default:
          $ref: "#/responses/ErrorUnexpected"
          
  # /profile:
  #   get:
  #     summary: "show spesific account profile"
  #     description: "show spesific account profile with identifier"
  #     tags:
  #       - "User"
  #     parameters:
  #       - in : header
  #         name: "identifier"
  #         type: "string"
  #         description: "unique id for every account"
  #         required: true
  #     responses:
  #       "200":
  #         description: "Success"
  #         schema:
  #           type: object
  #           properties:
  #             message:
  #               type: "string"
  #               description: "Success show profile"
  #               example: "Success show profile"
  #             data: 
  #               $ref: "#/definitions/Users"
  #       default:
  #         $ref: "#/responses/ErrorUnexpected"
  
  #   patch:
  #     summary: "edit user profile"
  #     description: "edit user profile with identifier"
  #     tags:
  #       - "User"
  #     parameters:
  #       - in: header
  #         name: "identifier"
  #         type: "string"
  #         description: "unique id for every account"
  #         required: true
  #       - in: body
  #         name: body
  #         description: "Body for edit profile with an existing account"
  #         required: true
  #         schema:
  #           $ref: "#/definitions/Users"
  #     responses:
  #       "200":
  #         description: "Success"
  #         schema:
  #           type: object
  #           properties:
  #             message:
  #               type: "string"
  #               description: "Success edit user profile"
  #               example: "Success edit user profile"
  #       default:
  #         $ref: "#/responses/ErrorUnexpected"

definitions:    

#### REQUEST ####

  RegisterRequest:
    type: "object"
    required:
      - username
      - email
      - password
    properties:
      user_id:
        type: "integer"
      username:
        type: "string"
        example: "Hulhay169"
        minLength: 5
      email:
        type: "string"
        format: "email"
        example: "hulhay@gmail.com"
      password:
        type: "string"
        minLength: 6
      user_photo:
        type: "string"
      token:
        type: "string"
        
  LoginRequest:
    type: "object"
    required:
      - username
      - password
    properties:
      username:
        type: "string"
      password:
        type: "string"
        minLength: 6

#### Response ####
        
#### Models ####        
        
  Health:
    type: "object"
    properties:
      status:
        type: string
        example: "UP"
        
  Auth:
    type: "object"
    properties:
      auth_id:
        type: "integer"
        format: "int64"
        x-go-custom-tag: gorm:"type:int primary key auto_increment"
      user_id:
        type: "integer"
        x-go-custom-tag: gorm:"foreignKey:UserID;references:UserID"
      username:
        type: "string"
        x-go-custom-tag: gorm:"type:varchar(255)"
      token:
        type: "string"
        x-go-custom-tag: gorm:"type:varchar(255)"
      islogin:
        type: "boolean"
        x-go-custom-tag: gorm:"type:tinyint(1);default:0"
        
  Users:
    type: "object"
    properties:
      user_id:
        type: "integer"
        format: "int64"
        x-go-custom-tag: gorm:"type:int primary key auto_increment"
      username:
        type: "string"
        x-go-custom-tag: gorm:"type:varchar(255)"
      email:
        type: "string"
        format: "email"
        x-go-name: "email"
        x-go-custom-tag: gorm:"type:varchar(255)"
      password:
        type: "string"
        x-go-custom-tag: gorm:"type:varchar(255)"
      token:
        type: "string"
        x-go-custom-tag: gorm:"type:varchar(255)"
      user_photo:
        type: "string"
        x-go-custom-tag: gorm:"type:varchar(255);default:up0.jpg"
      created_at:
        type: "string"
        format: "date-time"
        x-go-custom-tag: gorm:"type:timestamp;autoCreateTime"
      updated_at:
        type: "string"
        format: "date-time"
        x-go-custom-tag: gorm:"type:timestamp;autoUpdateTime"
  
  Quotes:
    type: "object"
    required:
      - quote
      - author
      - tags
    properties:
      quote_id:
        type: "integer"
        x-go-custom-tag: gorm:"type:int primary key auto_increment"
      user_id:
        type: "integer"
        x-go-custom-tag: gorm:"foreignKey:UserID;references:UserID"
      quote:
        type: "string"
        maxLength: 100
        x-go-custom-tag: gorm:"type:varchar(255)"
      author:
        type: "string"
        x-go-custom-tag: gorm:"type:varchar(255)"
      tags:
        type: "array"
        items:
          type: "string"
        x-go-custom-tag: gorm:"type:varchar(255)"
      upvote:
        type: "integer"
        x-go-custom-tag: gorm:"type:int(255);default:0"
      downvote:
        type: "integer"
        x-go-custom-tag: gorm:"type:int(255);default:0"
      created_at:
        type: "string"
        format: "date-time"
        x-go-custom-tag: gorm:"type:timestamp;autoCreateTime"
      updated_at:
        type: "string"
        format: "date-time"
        x-go-custom-tag: gorm:"type:timestamp;autoUpdateTime"

  Ratings:
    type: object
    properties:
      rating_id:
        type: "integer"
        x-go-custom-tag: gorm:"type:int primary key auto_increment"
      user_id:
        type: "integer"
        x-go-custom-tag: gorm:"foreignKey:UserID;references:UserID"
      quote_count:
        type: "integer"
        x-go-custom-tag: gorm:"type:int(255);default:0"
      user_rating:
        type: "number"
        format: "float64"
        x-go-custom-tag: gorm:"type:float;default:0.0"

  Error:
    type: object
    properties:
      code:
        type: string
        example: "500"
      message:
        type: string
        example: "error"

  # Metadata:
  #   type: "object"
  #   properties:
  #     page:
  #       type: integer
  #       example: 1
  #     per_page:
  #       type: integer
  #       example: 50
  #     total_row:
  #       type: integer
  #       example: 200
  #     total_page:
  #       type: integer
  #       example: 4

responses:
  # NotFound:
  #   description: The specified resource was not found
  #   schema:
  #     $ref: "#/definitions/Error"
  # Unauthorized:
  #   description: Unauthorized
  #   schema:
  #     $ref: "#/definitions/Error"
  # BadRequest:
  #   description: Bad Request
  #   schema:
  #     $ref: "#/definitions/Error"
  # ServiceUnvailable:
  #   description: Bad Request
  #   schema:
  #     $ref: "#/definitions/Error"
  # UprocessableEntity:
  #   description: UprocessableEntity
  #   schema:
  #     $ref: "#/definitions/Error"
  # InternalServerError:
  #   description: Internal server error
  #   schema:
  #     $ref: "#/definitions/Error"
  ErrorUnexpected:
    description: Unexpected
    schema:
      $ref: "#/definitions/Error"